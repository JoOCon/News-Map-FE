// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Routes
        changeMap={[Function]}
        displaySidebar={[Function]}
        login={[Function]}
        mapType="streets"
        redirect={false}
        stateSidebar={false}
        user={null}
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "changeMap": [Function],
        "displaySidebar": [Function],
        "login": [Function],
        "mapType": "streets",
        "redirect": false,
        "stateSidebar": false,
        "user": null,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Routes
          changeMap={[Function]}
          displaySidebar={[Function]}
          login={[Function]}
          mapType="streets"
          redirect={false}
          stateSidebar={false}
          user={null}
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "changeMap": [Function],
          "displaySidebar": [Function],
          "login": [Function],
          "mapType": "streets",
          "redirect": false,
          "stateSidebar": false,
          "user": null,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`App should match snapshot when displaySidebar is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Routes
        changeMap={[Function]}
        displaySidebar={[Function]}
        login={[Function]}
        mapType="streets"
        redirect={false}
        stateSidebar={true}
        user={null}
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "changeMap": [Function],
        "displaySidebar": [Function],
        "login": [Function],
        "mapType": "streets",
        "redirect": false,
        "stateSidebar": true,
        "user": null,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Routes
          changeMap={[Function]}
          displaySidebar={[Function]}
          login={[Function]}
          mapType="streets"
          redirect={false}
          stateSidebar={true}
          user={null}
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "changeMap": [Function],
          "displaySidebar": [Function],
          "login": [Function],
          "mapType": "streets",
          "redirect": false,
          "stateSidebar": true,
          "user": null,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`App should match snapshot when user is logged in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Routes
        changeMap={[Function]}
        displaySidebar={[Function]}
        login={[Function]}
        mapType="streets"
        redirect={false}
        stateSidebar={false}
        user={
          Object {
            "name": "paul",
          }
        }
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "changeMap": [Function],
        "displaySidebar": [Function],
        "login": [Function],
        "mapType": "streets",
        "redirect": false,
        "stateSidebar": false,
        "user": Object {
          "name": "paul",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Routes
          changeMap={[Function]}
          displaySidebar={[Function]}
          login={[Function]}
          mapType="streets"
          redirect={false}
          stateSidebar={false}
          user={
            Object {
              "name": "paul",
            }
          }
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "changeMap": [Function],
          "displaySidebar": [Function],
          "login": [Function],
          "mapType": "streets",
          "redirect": false,
          "stateSidebar": false,
          "user": Object {
            "name": "paul",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
